@page "/userFreeAppointments"
@attribute [Authorize]
@inject IAppointmentsService AppointmentsService
@inject NavigationManager uriHelper
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@using System.Threading



<div class="card mt-4">
    <h4 class="card-header">Free Appointments Slots</h4>
    <div class="card-body">

        <h6>Appointments from secure api end point</h6>


        @if (loading)
        {
            <div class="spinner-border spinner-border-sm"></div>}
        @if (appointments != null)
        {
            

            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Date</th>
                        <th scope="col">Time start</th>
                        <th scope="col">Time stop</th>
                        <th scope="col">Minutes</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var appointment in appointments.Reverse())
                    {
                        @if (appointment.UserId == 0 || appointment.UserId == null)
                        {
                            <tr>
                                
                                <td>@appointment.DateStart.ToShortDateString()</td>
                                <td>@appointment.TimeStart.ToShortTimeString()</td>
                                <td>@appointment.TimeStop.ToShortTimeString()</td>
                                <td>
                                
                                
                                @appointment.TimeStop.Subtract(appointment.TimeStart)
                                </td>
                                <td>
                                    <a class="btn btn-success" href='/userAppointments/@appointment.Id'>Pick</a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>}

    </div>
</div>

@code { private bool loading;
    private IEnumerable<Appointment> appointments;
    private System.Threading.Timer timer;
    private string minutes;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        appointments = await AppointmentsService.GetAll();

        timer = new System.Threading.Timer(async (object stateInfo) =>
        {

            appointments = await AppointmentsService.GetAll();

            StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT

        }, new System.Threading.AutoResetEvent(false), 1000, 1000);

        loading = false;
    }

    

    void back()
    {
        navigationManager.NavigateTo("/appointments");
    }

    void minutesCalculator(DateTime start, DateTime stop)
    {
        DateTime startTime = start;
        DateTime endTime = stop;

        TimeSpan span = endTime.Subtract(startTime);
        this.minutes = span.ToString();

    }


}